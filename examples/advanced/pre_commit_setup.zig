//! Pre-commit Hook Setup Script
//!
//! This script installs git pre-commit hooks for automatic code quality checks.
//! Run with: zig run pre_commit_setup.zig

const std = @import("std");
const builtin = @import("builtin");

const HookType = enum {
    bash,
    fish,
    powershell,
};

pub fn main() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer _ = gpa.deinit();
    const allocator = gpa.allocator();

    const args = try std.process.argsAlloc(allocator);
    defer std.process.argsFree(allocator, args);

    var hook_type: HookType = .bash;
    var install = true;
    var force = false;

    // Parse arguments
    for (args[1..]) |arg| {
        if (std.mem.eql(u8, arg, "--help") or std.mem.eql(u8, arg, "-h")) {
            printHelp();
            return;
        } else if (std.mem.eql(u8, arg, "--uninstall")) {
            install = false;
        } else if (std.mem.eql(u8, arg, "--force")) {
            force = true;
        } else if (std.mem.eql(u8, arg, "--shell=fish")) {
            hook_type = .fish;
        } else if (std.mem.eql(u8, arg, "--shell=powershell")) {
            hook_type = .powershell;
        }
    }

    if (install) {
        try installHook(allocator, hook_type, force);
    } else {
        try uninstallHook();
    }
}

fn installHook(allocator: std.mem.Allocator, hook_type: HookType, force: bool) !void {
    const cwd = std.fs.cwd();
    
    // Check if we're in a git repository
    cwd.access(".git", .{}) catch {
        std.debug.print("Error: Not in a git repository root directory\n", .{});
        std.debug.print("Run this command from your project's root directory\n", .{});
        return error.NotGitRepository;
    };

    // Create hooks directory if it doesn't exist
    cwd.makeDir(".git/hooks") catch |err| switch (err) {
        error.PathAlreadyExists => {},
        else => return err,
    };

    const hook_path = ".git/hooks/pre-commit";
    
    // Check if hook already exists
    if (!force) {
        cwd.access(hook_path, .{}) catch |err| switch (err) {
            error.FileNotFound => {}, // Good, we can create it
            else => {
                std.debug.print("Pre-commit hook already exists!\n", .{});
                std.debug.print("Use --force to overwrite\n", .{});
                return error.HookAlreadyExists;
            },
        };
    }

    // Generate hook content based on type
    const hook_content = switch (hook_type) {
        .bash => try generateBashHook(allocator),
        .fish => try generateFishHook(allocator),
        .powershell => try generatePowershellHook(allocator),
    };
    defer allocator.free(hook_content);

    // Write hook file
    const file = try cwd.createFile(hook_path, .{});
    defer file.close();
    
    try file.writeAll(hook_content);
    
    // Make executable on Unix systems
    if (builtin.os.tag != .windows) {
        try file.chmod(0o755);
    }

    std.debug.print("✓ Pre-commit hook installed successfully!\n", .{});
    std.debug.print("\nThe hook will run before each commit and check:\n", .{});
    std.debug.print("  - Memory safety (missing defer, allocator usage)\n", .{});
    std.debug.print("  - Test compliance (naming, categorization)\n", .{});
    std.debug.print("\nTo skip the hook temporarily, use: git commit --no-verify\n", .{});
}

fn uninstallHook() !void {
    const cwd = std.fs.cwd();
    
    cwd.deleteFile(".git/hooks/pre-commit") catch |err| switch (err) {
        error.FileNotFound => {
            std.debug.print("No pre-commit hook found\n", .{});
            return;
        },
        else => return err,
    };
    
    std.debug.print("✓ Pre-commit hook removed\n", .{});
}

fn generateBashHook(allocator: std.mem.Allocator) ![]const u8 {
    return try std.fmt.allocPrint(allocator,
        \\#!/bin/bash
        \\# zig-tooling pre-commit hook
        \\# Generated by pre_commit_setup.zig
        \\
        \\set -e
        \\
        \\echo "Running zig-tooling quality checks..."
        \\
        \\# Check if zig is available
        \\if ! command -v zig &> /dev/null; then
        \\    echo "Error: zig not found in PATH"
        \\    exit 1
        \\fi
        \\
        \\# Get list of staged Zig files
        \\STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.zig$' || true)
        \\
        \\if [ -z "$STAGED_FILES" ]; then
        \\    echo "No Zig files staged for commit"
        \\    exit 0
        \\fi
        \\
        \\# Save current directory
        \\REPO_ROOT=$(git rev-parse --show-toplevel)
        \\cd "$REPO_ROOT"
        \\
        \\# Run quality checks
        \\echo "Checking $STAGED_FILES"
        \\
        \\# Try to use the project's quality check if available
        \\if [ -f "build.zig" ] && grep -q "quality" build.zig; then
        \\    echo "Using project quality checks..."
        \\    if ! zig build quality; then
        \\        echo ""
        \\        echo "❌ Quality check failed!"
        \\        echo "Fix the issues above or use 'git commit --no-verify' to skip"
        \\        exit 1
        \\    fi
        \\else
        \\    echo "Warning: No 'quality' build step found"
        \\    echo "Consider adding zig-tooling to your build.zig"
        \\fi
        \\
        \\echo "✓ All quality checks passed!"
        \\exit 0
    , .{});
}

fn generateFishHook(allocator: std.mem.Allocator) ![]const u8 {
    return try std.fmt.allocPrint(allocator,
        \\#!/usr/bin/env fish
        \\# zig-tooling pre-commit hook for Fish shell
        \\# Generated by pre_commit_setup.zig
        \\
        \\echo "Running zig-tooling quality checks..."
        \\
        \\# Check if zig is available
        \\if not command -v zig &> /dev/null
        \\    echo "Error: zig not found in PATH"
        \\    exit 1
        \\end
        \\
        \\# Get list of staged Zig files
        \\set STAGED_FILES (git diff --cached --name-only --diff-filter=ACM | grep '\.zig$' || true)
        \\
        \\if test -z "$STAGED_FILES"
        \\    echo "No Zig files staged for commit"
        \\    exit 0
        \\end
        \\
        \\# Save current directory
        \\set REPO_ROOT (git rev-parse --show-toplevel)
        \\cd "$REPO_ROOT"
        \\
        \\# Run quality checks
        \\echo "Checking $STAGED_FILES"
        \\
        \\# Try to use the project's quality check if available
        \\if test -f "build.zig"; and grep -q "quality" build.zig
        \\    echo "Using project quality checks..."
        \\    if not zig build quality
        \\        echo ""
        \\        echo "❌ Quality check failed!"
        \\        echo "Fix the issues above or use 'git commit --no-verify' to skip"
        \\        exit 1
        \\    end
        \\else
        \\    echo "Warning: No 'quality' build step found"
        \\    echo "Consider adding zig-tooling to your build.zig"
        \\end
        \\
        \\echo "✓ All quality checks passed!"
        \\exit 0
    , .{});
}

fn generatePowershellHook(allocator: std.mem.Allocator) ![]const u8 {
    return try std.fmt.allocPrint(allocator,
        \\#!/usr/bin/env pwsh
        \\# zig-tooling pre-commit hook for PowerShell
        \\# Generated by pre_commit_setup.zig
        \\
        \\Write-Host "Running zig-tooling quality checks..."
        \\
        \\# Check if zig is available
        \\if (-not (Get-Command zig -ErrorAction SilentlyContinue)) {{
        \\    Write-Error "Error: zig not found in PATH"
        \\    exit 1
        \\}}
        \\
        \\# Get list of staged Zig files
        \\$STAGED_FILES = git diff --cached --name-only --diff-filter=ACM | Select-String '\.zig$'
        \\
        \\if (-not $STAGED_FILES) {{
        \\    Write-Host "No Zig files staged for commit"
        \\    exit 0
        \\}}
        \\
        \\# Save current directory
        \\$REPO_ROOT = git rev-parse --show-toplevel
        \\Set-Location $REPO_ROOT
        \\
        \\# Run quality checks
        \\Write-Host "Checking $($STAGED_FILES -join ', ')"
        \\
        \\# Try to use the project's quality check if available
        \\if ((Test-Path "build.zig") -and (Select-String -Path "build.zig" -Pattern "quality")) {{
        \\    Write-Host "Using project quality checks..."
        \\    zig build quality
        \\    if ($LASTEXITCODE -ne 0) {{
        \\        Write-Host ""
        \\        Write-Host "❌ Quality check failed!" -ForegroundColor Red
        \\        Write-Host "Fix the issues above or use 'git commit --no-verify' to skip"
        \\        exit 1
        \\    }}
        \\}} else {{
        \\    Write-Warning "No 'quality' build step found"
        \\    Write-Host "Consider adding zig-tooling to your build.zig"
        \\}}
        \\
        \\Write-Host "✓ All quality checks passed!" -ForegroundColor Green
        \\exit 0
    , .{});
}

fn printHelp() void {
    const stdout = std.io.getStdOut().writer();
    stdout.print(
        \\Pre-commit Hook Setup for zig-tooling
        \\
        \\USAGE:
        \\    zig run pre_commit_setup.zig [OPTIONS]
        \\
        \\OPTIONS:
        \\    --help, -h         Show this help message
        \\    --uninstall        Remove the pre-commit hook
        \\    --force            Overwrite existing hook
        \\    --shell=<type>     Hook shell type: bash (default), fish, powershell
        \\
        \\EXAMPLES:
        \\    # Install bash pre-commit hook
        \\    zig run pre_commit_setup.zig
        \\    
        \\    # Install fish shell hook
        \\    zig run pre_commit_setup.zig --shell=fish
        \\    
        \\    # Force overwrite existing hook
        \\    zig run pre_commit_setup.zig --force
        \\    
        \\    # Remove pre-commit hook
        \\    zig run pre_commit_setup.zig --uninstall
        \\
        \\The pre-commit hook will automatically run quality checks on staged
        \\Zig files before each commit. Use 'git commit --no-verify' to skip.
        \\
    , .{}) catch {};
}

// Optional: Include this in your build.zig as a build step
// const hook_step = b.step("install-hooks", "Install git pre-commit hooks");
// const hook_installer = b.addExecutable(.{
//     .name = "install_hooks",
//     .root_source_file = b.path("tools/pre_commit_setup.zig"),
//     .target = target,
//     .optimize = optimize,
// });
// const run_installer = b.addRunArtifact(hook_installer);
// hook_step.dependOn(&run_installer.step);