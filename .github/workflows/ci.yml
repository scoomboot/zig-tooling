# zig-tooling CI/CD Pipeline
#
# This workflow runs on every push and pull request to ensure code quality
# and that all tools compile successfully.

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  ZIG_VERSION: '0.14.1'

jobs:
  # Validate that all tools compile
  validate-tools:
    name: Validate Tools Compilation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Zig
      uses: mlugg/setup-zig@v1
      with:
        version: ${{ env.ZIG_VERSION }}
    
    - name: Cache Zig dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/zig
          zig-cache
          zig-out
        key: ${{ runner.os }}-zig-${{ hashFiles('build.zig.zon') }}
        restore-keys: |
          ${{ runner.os }}-zig-
    
    - name: Validate tools compilation
      run: |
        zig build validate-tools --summary all
        echo "✅ All tools compiled successfully"

  # Run unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - uses: mlugg/setup-zig@v1
      with:
        version: ${{ env.ZIG_VERSION }}
    
    - name: Run unit tests
      run: |
        zig build test --summary all

  # Run integration tests separately with timeout and resource limits
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    # Run in a container with resource limits to ensure consistent test behavior
    container:
      image: ubuntu:22.04
      options: --memory 4g --cpus 2
    
    steps:
    - name: Install prerequisites
      run: |
        apt-get update
        apt-get install -y curl xz-utils git
    
    - uses: actions/checkout@v4
    
    - name: Setup Zig
      run: |
        curl -L https://ziglang.org/download/${{ env.ZIG_VERSION }}/zig-linux-x86_64-${{ env.ZIG_VERSION }}.tar.xz | tar -xJ
        echo "$PWD/zig-linux-x86_64-${{ env.ZIG_VERSION }}" >> $GITHUB_PATH
    
    - name: Run integration tests
      env:
        # Environment variables for test resource constraints
        ZTOOL_TEST_MAX_MEMORY_MB: "3072"  # Leave 1GB headroom from container limit
        ZTOOL_TEST_MAX_THREADS: "4"       # Allow some parallelism within CPU limits
      run: |
        zig version
        zig build test-integration --summary all

  # Run quality checks using the compiled tool
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: validate-tools
    
    steps:
    - uses: actions/checkout@v4
    - uses: mlugg/setup-zig@v1
      with:
        version: ${{ env.ZIG_VERSION }}
    
    - name: Run quality checks
      run: |
        zig build quality --summary all || true
      continue-on-error: true
    
    - name: Run dogfood check (non-blocking)
      run: |
        zig build dogfood --summary all || true
        echo "Note: Dogfood check is non-blocking and for informational purposes only"

  # Matrix build for multiple platforms
  cross-platform:
    name: ${{ matrix.os }} Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    - uses: mlugg/setup-zig@v1
      with:
        version: ${{ env.ZIG_VERSION }}
    
    - name: Build library
      run: zig build --summary all
    
    - name: Validate tools
      run: zig build validate-tools --summary all

  # All checks must pass
  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [validate-tools, unit-tests, integration-tests, quality-check, cross-platform]
    if: always()
    
    steps:
    - name: Check results
      run: |
        if [ "${{ needs.validate-tools.result }}" != "success" ] || \
           [ "${{ needs.unit-tests.result }}" != "success" ] || \
           [ "${{ needs.integration-tests.result }}" != "success" ] || \
           [ "${{ needs.cross-platform.result }}" != "success" ]; then
          echo "❌ Some required checks failed"
          exit 1
        fi
        echo "✅ All required checks passed!"